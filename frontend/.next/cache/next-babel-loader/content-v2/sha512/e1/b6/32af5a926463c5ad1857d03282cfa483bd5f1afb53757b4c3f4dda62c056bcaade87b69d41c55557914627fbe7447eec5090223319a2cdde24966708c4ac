{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Pagination';\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n\n    // tells Apollo we'll care of everything\n    read(existing = [], {\n      args,\n      cache\n    }) {\n      var _data$_allProductsMet;\n\n      console.log({\n        existing,\n        args,\n        cache\n      });\n      const {\n        skip,\n        first\n      } = args; // Read the items number on the page from the cache:\n\n      const data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      const count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first); // Check if we have existing items:\n\n      const items = existing.slice(skip, skip + first).filter(item => item);\n\n      if (items.length !== first) {\n        // If no any items, go to the network to fetch them\n        return false;\n      } // If there are items, return thwm without fetching the network:\n\n\n      if (items.length) {\n        console.log(`There are ${items.length} items in a cache! Gonna send em to apollo`);\n        return items;\n      } // console.log(data);\n\n\n      return false; // Fallback to network\n    },\n\n    merge(existing, incoming, {\n      args\n    }) {\n      // Runs when apollo client comes back from the network with our product:\n      console.log(`Merging items from the network: ${incoming.length} items`);\n      const merged = existing ? existing.slice(0) : [];\n\n      for (let i = skip; i < skip + incoming.length; i++) {\n        merged[i] = incoming[i - skip];\n      }\n\n      console.log(merged);\n    }\n\n  };\n}","map":{"version":3,"sources":["C:/projects/advanced-react/Advanced-React/sick-fits/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","console","log","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","item","length","merge","incoming","merged","i"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,SAAO;AACLC,IAAAA,OAAO,EAAE,KADJ;;AACW;AAChBC,IAAAA,IAAI,CAACC,QAAQ,GAAG,EAAZ,EAAgB;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAhB,EAAiC;AAAA;;AACnCC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEJ,QAAAA,QAAF;AAAYC,QAAAA,IAAZ;AAAkBC,QAAAA;AAAlB,OAAZ;AACA,YAAM;AAAEG,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBL,IAAxB,CAFmC,CAGnC;;AACA,YAAMM,IAAI,GAAGL,KAAK,CAACM,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEb;AAAT,OAAhB,CAAb;AACA,YAAMc,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,YAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,YAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CAPmC,CASnC;;AACA,YAAMU,KAAK,GAAGhB,QAAQ,CAACiB,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA2CC,IAAD,IAAUA,IAApD,CAAd;;AACA,UAAIH,KAAK,CAACI,MAAN,KAAiBd,KAArB,EAA4B;AAC1B;AACA,eAAO,KAAP;AACD,OAdkC,CAenC;;;AACA,UAAIU,KAAK,CAACI,MAAV,EAAkB;AAChBjB,QAAAA,OAAO,CAACC,GAAR,CACG,aAAYY,KAAK,CAACI,MAAO,4CAD5B;AAGA,eAAOJ,KAAP;AACD,OArBkC,CAsBnC;;;AACA,aAAO,KAAP,CAvBmC,CAuBrB;AACf,KA1BI;;AA2BLK,IAAAA,KAAK,CAACrB,QAAD,EAAWsB,QAAX,EAAqB;AAAErB,MAAAA;AAAF,KAArB,EAA+B;AAClC;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAa,mCAAkCkB,QAAQ,CAACF,MAAO,QAA/D;AACA,YAAMG,MAAM,GAAGvB,QAAQ,GAAGA,QAAQ,CAACiB,KAAT,CAAe,CAAf,CAAH,GAAuB,EAA9C;;AAEA,WAAK,IAAIO,CAAC,GAAGnB,IAAb,EAAmBmB,CAAC,GAAGnB,IAAI,GAAGiB,QAAQ,CAACF,MAAvC,EAA+CI,CAAC,EAAhD,EAAoD;AAClDD,QAAAA,MAAM,CAACC,CAAD,CAAN,GAAYF,QAAQ,CAACE,CAAC,GAAGnB,IAAL,CAApB;AACD;;AACDF,MAAAA,OAAO,CAACC,GAAR,CAAYmB,MAAZ;AACD;;AApCI,GAAP;AAsCD","sourcesContent":["import { PAGINATION_QUERY } from '../components/Pagination';\r\n\r\nexport default function paginationField() {\r\n  return {\r\n    keyArgs: false, // tells Apollo we'll care of everything\r\n    read(existing = [], { args, cache }) {\r\n      console.log({ existing, args, cache });\r\n      const { skip, first } = args;\r\n      // Read the items number on the page from the cache:\r\n      const data = cache.readQuery({ query: PAGINATION_QUERY });\r\n      const count = data?._allProductsMeta?.count;\r\n      const page = skip / first + 1;\r\n      const pages = Math.ceil(count / first);\r\n\r\n      // Check if we have existing items:\r\n      const items = existing.slice(skip, skip + first).filter((item) => item);\r\n      if (items.length !== first) {\r\n        // If no any items, go to the network to fetch them\r\n        return false;\r\n      }\r\n      // If there are items, return thwm without fetching the network:\r\n      if (items.length) {\r\n        console.log(\r\n          `There are ${items.length} items in a cache! Gonna send em to apollo`\r\n        );\r\n        return items;\r\n      }\r\n      // console.log(data);\r\n      return false; // Fallback to network\r\n    },\r\n    merge(existing, incoming, { args }) {\r\n      // Runs when apollo client comes back from the network with our product:\r\n      console.log(`Merging items from the network: ${incoming.length} items`);\r\n      const merged = existing ? existing.slice(0) : [];\r\n\r\n      for (let i = skip; i < skip + incoming.length; i++) {\r\n        merged[i] = incoming[i - skip];\r\n      }\r\n      console.log(merged)\r\n    },\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}