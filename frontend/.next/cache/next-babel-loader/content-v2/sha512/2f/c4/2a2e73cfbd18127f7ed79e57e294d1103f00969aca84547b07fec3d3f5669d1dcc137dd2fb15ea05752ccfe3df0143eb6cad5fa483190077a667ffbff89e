{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\projects\\\\advanced-react\\\\Advanced-React\\\\sick-fits\\\\frontend\\\\components\\\\UpdateProduct.js\";\nimport gql from 'graphql-tag';\nimport { useMutation, useQuery } from '@apollo/client';\nimport Form from './styles/Form';\nimport DisplayError from './ErrorMessage';\nimport useForm from '../lib/useForm';\nconst SINGLE_PRODUCT_QUERY = gql`\n  query SINGLE_PRODUCT_QUERY($id: ID!) {\n    Product(where: { id: $id }) {\n      id\n      name\n      description\n      price\n    }\n  }\n`;\nconst UPDATE_PRODUCT_MUTATION = gql`\n  mutation UPDATE_PRODUCT_MUTATION(\n    $id: ID!\n    $name: String\n    $description: String\n    $price: Int\n  ) {\n    updateProduct(\n      id: $id\n      data: { id: $id, name: $name, description: $description, price: $price }\n    ) {\n      id\n      price\n      description\n      name\n    }\n  }\n`; // eslint-disable-next-line react/prop-types\n\nexport default function UpdateProduct({\n  id\n}) {\n  // 1. get the existing item\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: {\n      id\n    }\n  });\n  console.log('data from updates: ', data); // 2. get the mutation to update the item\n\n  const [updateProduct, mutationResponse] = useMutation(UPDATE_PRODUCT_MUTATION, {\n    variables: {\n      id // updates to the product:\n\n    }\n  }); // inputs state:\n\n  const {\n    inputs,\n    handleChange,\n    clearForm,\n    resetForm\n  } = useForm(data === null || data === void 0 ? void 0 : data.Product);\n  console.log(inputs); // 3. we need the form to handle the updates\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading! \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: async e => {\n      e.preventDefault(); // @TODO: handle submit\n      // Submit input fields to the backend:\n      // const res = await createProduct();\n      // clearForm();\n      // // Redirect toi the Products page:\n      // Router.push({\n      //   pathname: `/product/${res.data.createProduct.id}`,\n      // });\n    },\n    children: [/*#__PURE__*/_jsxDEV(DisplayError, {\n      error: mutationResponse.error || error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      disabled: mutationResponse.loading,\n      \"aria-busy\": mutationResponse.loading,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"image\",\n        children: [\"Image\", /*#__PURE__*/_jsxDEV(\"input\", {\n          required: true,\n          type: \"file\",\n          id: \"image\",\n          name: \"image\",\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          name: \"name\",\n          placeholder: \"Name\",\n          value: inputs.name,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"price\",\n        children: [\"Price\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"price\",\n          name: \"price\",\n          placeholder: \"Price\",\n          value: inputs.price,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"description\",\n        children: [\"Description\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"description\",\n          name: \"description\",\n          placeholder: \"Description\",\n          value: inputs.description,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => console.log('inputs::: ', inputs),\n        type: \"submit\",\n        children: \"Update Product\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/projects/advanced-react/Advanced-React/sick-fits/frontend/components/UpdateProduct.js"],"names":["gql","useMutation","useQuery","Form","DisplayError","useForm","SINGLE_PRODUCT_QUERY","UPDATE_PRODUCT_MUTATION","UpdateProduct","id","data","error","loading","variables","console","log","updateProduct","mutationResponse","inputs","handleChange","clearForm","resetForm","Product","e","preventDefault","name","price","description"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport Form from './styles/Form';\r\nimport DisplayError from './ErrorMessage';\r\nimport useForm from '../lib/useForm';\r\n\r\nconst SINGLE_PRODUCT_QUERY = gql`\r\n  query SINGLE_PRODUCT_QUERY($id: ID!) {\r\n    Product(where: { id: $id }) {\r\n      id\r\n      name\r\n      description\r\n      price\r\n    }\r\n  }\r\n`;\r\n\r\nconst UPDATE_PRODUCT_MUTATION = gql`\r\n  mutation UPDATE_PRODUCT_MUTATION(\r\n    $id: ID!\r\n    $name: String\r\n    $description: String\r\n    $price: Int\r\n  ) {\r\n    updateProduct(\r\n      id: $id\r\n      data: { id: $id, name: $name, description: $description, price: $price }\r\n    ) {\r\n      id\r\n      price\r\n      description\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\n// eslint-disable-next-line react/prop-types\r\nexport default function UpdateProduct({ id }) {\r\n  // 1. get the existing item\r\n  const { data, error, loading } = useQuery(SINGLE_PRODUCT_QUERY, {\r\n    variables: { id },\r\n  });\r\n\r\n  console.log('data from updates: ', data)\r\n\r\n  // 2. get the mutation to update the item\r\n  const [updateProduct, mutationResponse] = useMutation(\r\n    UPDATE_PRODUCT_MUTATION,\r\n    {\r\n      variables: {\r\n        id,\r\n        // updates to the product:\r\n      },\r\n    }\r\n  );\r\n  // inputs state:\r\n  const { inputs, handleChange, clearForm, resetForm } = useForm(data?.Product);\r\n  console.log(inputs);\r\n\r\n  // 3. we need the form to handle the updates\r\n  if (loading) {\r\n    return <p>Loading! </p>;\r\n  }\r\n  return (\r\n    <Form\r\n      onSubmit={async (e) => {\r\n        e.preventDefault();\r\n        // @TODO: handle submit\r\n\r\n        // Submit input fields to the backend:\r\n        // const res = await createProduct();\r\n        // clearForm();\r\n        // // Redirect toi the Products page:\r\n        // Router.push({\r\n        //   pathname: `/product/${res.data.createProduct.id}`,\r\n        // });\r\n      }}\r\n    >\r\n      <DisplayError error={mutationResponse.error || error} />\r\n      <fieldset\r\n        disabled={mutationResponse.loading}\r\n        aria-busy={mutationResponse.loading}\r\n      >\r\n        <label htmlFor=\"image\">\r\n          Image\r\n          <input\r\n            required\r\n            type=\"file\"\r\n            id=\"image\"\r\n            name=\"image\"\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <label htmlFor=\"name\">\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            id=\"name\"\r\n            name=\"name\"\r\n            placeholder=\"Name\"\r\n            value={inputs.name}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <label htmlFor=\"price\">\r\n          Price\r\n          <input\r\n            type=\"number\"\r\n            id=\"price\"\r\n            name=\"price\"\r\n            placeholder=\"Price\"\r\n            value={inputs.price}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <label htmlFor=\"description\">\r\n          Description\r\n          <textarea\r\n            id=\"description\"\r\n            name=\"description\"\r\n            placeholder=\"Description\"\r\n            value={inputs.description}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <button onClick={() => console.log('inputs::: ', inputs)} type=\"submit\">\r\n          Update Product\r\n        </button>\r\n      </fieldset>\r\n    </Form>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}