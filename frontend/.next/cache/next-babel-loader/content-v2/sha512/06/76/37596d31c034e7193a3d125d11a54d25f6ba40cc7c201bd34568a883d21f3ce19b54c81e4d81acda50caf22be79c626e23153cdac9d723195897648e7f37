{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _taggedTemplateLiteral from \"C:/projects/advanced-react/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"C:\\\\projects\\\\advanced-react\\\\Advanced-React\\\\sick-fits\\\\frontend\\\\components\\\\UpdateProduct.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SINGLE_PRODUCT_QUERY($id: ID!) {\\n    Product(where: { id: $id }) {\\n      id\\n      name\\n      description\\n      price\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nvar SINGLE_PRODUCT_QUERY = gql(_templateObject());\nexport default function UpdateProduct(_ref) {\n  _s();\n\n  var id = _ref.id;\n\n  // 1. get the existing item \n  var _useQuery = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading;\n\n  console.log('data from update: ', data); // 2. get the mutation to update the item \n  // 3. we need the form to handle the updates \n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Update!!! \", id, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n\n_s(UpdateProduct, \"eE+cqeCo2lkI//dPlCsO1rICVGU=\", false, function () {\n  return [useQuery];\n});\n\n_c = UpdateProduct;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateProduct\");","map":{"version":3,"sources":["C:/projects/advanced-react/Advanced-React/sick-fits/frontend/components/UpdateProduct.js"],"names":["gql","useQuery","SINGLE_PRODUCT_QUERY","UpdateProduct","id","variables","data","error","loading","console","log"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,IAAMC,oBAAoB,GAAIF,GAAJ,mBAA1B;AAaA,eAAe,SAASG,aAAT,OAA+B;AAAA;;AAAA,MAANC,EAAM,QAANA,EAAM;;AAC5C;AAD4C,kBAEXH,QAAQ,CAACC,oBAAD,EAAuB;AAC9DG,IAAAA,SAAS,EAAE;AAAED,MAAAA,EAAE,EAAFA;AAAF;AADmD,GAAvB,CAFG;AAAA,MAEpCE,IAFoC,aAEpCA,IAFoC;AAAA,MAE9BC,KAF8B,aAE9BA,KAF8B;AAAA,MAEvBC,OAFuB,aAEvBA,OAFuB;;AAM5CC,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCJ,IAAlC,EAN4C,CAO5C;AAEA;;AAEA,sBACE;AAAA,6BAAcF,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;;GAduBD,a;UAEWF,Q;;;KAFXE,a","sourcesContent":["import gql from 'graphql-tag'\r\nimport { useQuery } from '@apollo/client'\r\n\r\nconst SINGLE_PRODUCT_QUERY =  gql`\r\n  query SINGLE_PRODUCT_QUERY($id: ID!) {\r\n    Product(where: { id: $id }) {\r\n      id\r\n      name\r\n      description\r\n      price\r\n    }\r\n  }\r\n`\r\n\r\n\r\n\r\nexport default function UpdateProduct({ id }) {\r\n  // 1. get the existing item \r\n  const { data, error, loading } = useQuery(SINGLE_PRODUCT_QUERY, {\r\n    variables: { id }\r\n  })\r\n\r\n  console.log('data from update: ', data)\r\n  // 2. get the mutation to update the item \r\n\r\n  // 3. we need the form to handle the updates \r\n\r\n  return ( \r\n    <p>Update!!! {id} </p>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}