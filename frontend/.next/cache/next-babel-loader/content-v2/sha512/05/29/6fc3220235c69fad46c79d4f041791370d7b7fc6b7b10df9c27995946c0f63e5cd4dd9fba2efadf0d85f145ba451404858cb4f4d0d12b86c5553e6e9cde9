{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"C:/projects/advanced-react/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"C:/projects/advanced-react/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"C:\\\\projects\\\\advanced-react\\\\Advanced-React\\\\sick-fits\\\\frontend\\\\components\\\\UpdateProduct.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  query UPDATE_PRODUCT_MUTATION(\\n    $id: ID!\\n    $name: String\\n    $description: String\\n    $price: Int\\n  ) {\\n    updateProduct(\\n      id: $id\\n      data: { id: $id, name: $name, description: $description, price: $price }\\n    ) {\\n      id\\n      price\\n      description\\n      name\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SINGLE_PRODUCT_QUERY($id: ID!) {\\n    Product(where: { id: $id }) {\\n      id\\n      name\\n      description\\n      price\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport { useMutation, useQuery } from '@apollo/client';\nvar SINGLE_PRODUCT_QUERY = gql(_templateObject());\nvar UPDATE_PRODUCT_MUTATION = gql(_templateObject2());\nexport default function UpdateProduct(_ref) {\n  _s();\n\n  var id = _ref.id;\n\n  // 1. get the existing item\n  var _useQuery = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading; // 2. get the mutation to update the item\n\n\n  var _useMutation = useMutation(UPDATE_PRODUCT_MUTATION, {\n    variables: {\n      id: id // updates to the product:\n\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      updateProduct = _useMutation2[0],\n      mutationResponse = _useMutation2[1]; // 3. we need the form to handle the updates\n\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Update!!! \", id, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 10\n  }, this);\n}\n\n_s(UpdateProduct, \"qEwp7zZVXJ7RbnJiIcF8IKMYv6o=\", false, function () {\n  return [useQuery, useMutation];\n});\n\n_c = UpdateProduct;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateProduct\");","map":{"version":3,"sources":["C:/projects/advanced-react/Advanced-React/sick-fits/frontend/components/UpdateProduct.js"],"names":["gql","useMutation","useQuery","SINGLE_PRODUCT_QUERY","UPDATE_PRODUCT_MUTATION","UpdateProduct","id","variables","data","error","loading","updateProduct","mutationResponse"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,gBAAtC;AAEA,IAAMC,oBAAoB,GAAGH,GAAH,mBAA1B;AAWA,IAAMI,uBAAuB,GAAGJ,GAAH,oBAA7B;AAmBA,eAAe,SAASK,aAAT,OAA+B;AAAA;;AAAA,MAANC,EAAM,QAANA,EAAM;;AAC5C;AAD4C,kBAEXJ,QAAQ,CAACC,oBAAD,EAAuB;AAC9DI,IAAAA,SAAS,EAAE;AAAED,MAAAA,EAAE,EAAFA;AAAF;AADmD,GAAvB,CAFG;AAAA,MAEpCE,IAFoC,aAEpCA,IAFoC;AAAA,MAE9BC,KAF8B,aAE9BA,KAF8B;AAAA,MAEvBC,OAFuB,aAEvBA,OAFuB,EAM5C;;;AAN4C,qBAOFT,WAAW,CACnDG,uBADmD,EAEnD;AACEG,IAAAA,SAAS,EAAE;AACTD,MAAAA,EAAE,EAAFA,EADS,CAET;;AAFS;AADb,GAFmD,CAPT;AAAA;AAAA,MAOrCK,aAPqC;AAAA,MAOtBC,gBAPsB,qBAgB5C;;;AAEA,sBAAO;AAAA,6BAAcN,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAnBuBD,a;UAEWH,Q,EAKSD,W;;;KAPpBI,a","sourcesContent":["import gql from 'graphql-tag';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\n\r\nconst SINGLE_PRODUCT_QUERY = gql`\r\n  query SINGLE_PRODUCT_QUERY($id: ID!) {\r\n    Product(where: { id: $id }) {\r\n      id\r\n      name\r\n      description\r\n      price\r\n    }\r\n  }\r\n`;\r\n\r\nconst UPDATE_PRODUCT_MUTATION = gql`\r\n  query UPDATE_PRODUCT_MUTATION(\r\n    $id: ID!\r\n    $name: String\r\n    $description: String\r\n    $price: Int\r\n  ) {\r\n    updateProduct(\r\n      id: $id\r\n      data: { id: $id, name: $name, description: $description, price: $price }\r\n    ) {\r\n      id\r\n      price\r\n      description\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function UpdateProduct({ id }) {\r\n  // 1. get the existing item\r\n  const { data, error, loading } = useQuery(SINGLE_PRODUCT_QUERY, {\r\n    variables: { id },\r\n  });\r\n\r\n  // 2. get the mutation to update the item\r\n  const [updateProduct, mutationResponse] = useMutation(\r\n    UPDATE_PRODUCT_MUTATION,\r\n    {\r\n      variables: {\r\n        id,\r\n        // updates to the product:\r\n      },\r\n    }\r\n  );\r\n  // 3. we need the form to handle the updates\r\n\r\n  return <p>Update!!! {id} </p>;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}